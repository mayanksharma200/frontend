import React, { useState, useEffect } from "react";
import axios from "axios";
import CustomDatePicker from "./CustomDatePicker";

const Admin = () => {
  const [posts, setPosts] = useState([]);
  const [filteredPosts, setFilteredPosts] = useState([]);
  const [selectedPost, setSelectedPost] = useState(null);
  const [sectionsCount, setSectionsCount] = useState(5);
  const [isGenerating, setIsGenerating] = useState(false);
  const [aiError, setAiError] = useState("");
  const [formData, setFormData] = useState({
    title: "",
    position: "",
    link: "",
    content: {
      summary: [],
      body: [],
    },
    meta: {
      author: "",
      date: "",
      reviewer: "",
      readTime: "",
    },
    image: "",
    related_studies: [],
  });
  const [searchTerm, setSearchTerm] = useState("");
  const [searchField, setSearchField] = useState("title");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");

    const positionOptions = [
      {
        label: "Index",
        options: [
          { label: "Top", value: "TopTwoArticles" },
          { label: "This Just In", value: "JustIn" },
          { label: "More Top Reads", value: "MoreTopReads" },
        ],
      },
      {
        label: "Nutrition",
        options: [
          { label: "Top", value: "NutritionTop" },
          { label: "Mid", value: "NutritionMid" },
        ],
      },
      {
        label: "Sleep",
        options: [
          { label: "Top", value: "SleepTop" },
          { label: "Mid", value: "SleepMid" },
        ],
      },
      {
        label: "Mental Health",
        options: [
          { label: "Top", value: "MentalHealthTop" },
          { label: "Mid", value: "MentalHealthMid" },
        ],
      },
      {
        label: "Fitness",
        options: [
          { label: "Top", value: "FitnessTop" },
          { label: "Mid", value: "FitnessMid" },
        ],
      },
      {
        label: "Product Reviews",
        options: [
          { label: "Top", value: "ProductReviewsTop" },
          { label: "Mid", value: "ProductReviewsMid" },
        ],
      },
      {
        label: "View All",
        options: [
          { label: "Top", value: "ViewAllTop" },
          { label: "Mid", value: "ViewAllMid" },
        ],
      },
    ];

  useEffect(() => {
    fetchPosts();
  }, []);

  useEffect(() => {
    if (searchTerm === "") {
      setFilteredPosts(posts);
    } else {
      const filtered = posts.filter((post) => {
        if (searchField === "id") {
          return post._id.includes(searchTerm);
        } else {
          return post[searchField]
            .toLowerCase()
            .includes(searchTerm.toLowerCase());
        }
      });
      setFilteredPosts(filtered);
    }
  }, [searchTerm, searchField, posts]);

  const handleGenerateContent = async () => {
    if (!formData.title) {
      setAiError("Please enter a title first");
      return;
    }

    setIsGenerating(true);
    setAiError("");

    try {
      const response = await axios.post(
        "https://fitness-backend-api.vercel.app/api/posts/generate-content",
        {
          title: formData.title,
          source: "Generated by AI",
          imageUrl: formData.image,
          position: formData.position,
          sections: sectionsCount,
        }
      );

      if (response.data.success) {
        if (response.data.content) {
          setFormData((prev) => ({
            ...prev,
            content: {
              summary: response.data.content.summary || [],
              body: [
                ...(prev.content?.body || []),
                ...(response.data.content.body || []).map((item) => ({
                  headline: item.headline || "",
                  content: item.content || "",
                  keywords: item.keywords || [],
                  hyperlinks: (item.keywords || []).map((keyword) => ({
                    keyword,
                    link: "",
                  })),
                  subsections: item.subsections || [],
                })),
              ],
            },
          }));
        } else if (response.data.rawContent) {
          setFormData((prev) => ({
            ...prev,
            content: {
              ...prev.content,
              body: [
                ...(prev.content?.body || []),
                {
                  headline: "Generated Content",
                  content: response.data.rawContent,
                  keywords: [],
                  hyperlinks: [],
                  subsections: [],
                },
              ],
            },
          }));
        }
      } else {
        setAiError(response.data.error || "Failed to generate content");
      }
    } catch (error) {
      setAiError(error.message);
      console.error("AI generation error:", error);
    } finally {
      setIsGenerating(false);
    }
  };

  const fetchPosts = async () => {
    setIsLoading(true);
    try {
      const response = await axios.get(
        "https://fitness-backend-api.vercel.app/api/posts"
      );
      const normalizedPosts = response.data.map((post) => ({
        ...post,
        content: {
          summary: post.content?.summary || [],
          body: post.content?.body || [],
          ...post.content,
        },
      }));
      setPosts(normalizedPosts);
      setFilteredPosts(normalizedPosts);
      setError("");
    } catch (err) {
      setError("Failed to fetch posts");
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchTopArticles = async () => {
    setIsLoading(true);
    try {
      const response = await axios.get(
        "https://fitness-backend-api.vercel.app/api/posts/top-articles"
      );
      setFilteredPosts(response.data);
      setError("");
    } catch (err) {
      setError("Failed to fetch top articles");
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSelectPost = (post) => {
    setSelectedPost(post);
    setFormData({
      title: post.title || "",
      position: post.position || "",
      link: post.link || "",
      content: {
        summary:
          post.content?.summary?.map((item) => ({
            title: item.title || "",
            text: item.text || "",
          })) || [],
        body:
          post.content?.body?.map((item) => ({
            headline: item.headline || "",
            content: item.content || "",
            keywords: item.keywords || [],
            hyperlinks:
              item.hyperlinks?.map((link) => ({
                keyword: link.keyword || "",
                link: link.link || "",
              })) || [],
            subsections:
              item.subsections?.map((subsection) => ({
                subheading: subsection.subheading || "",
                content: subsection.content || "",
              })) || [],
          })) || [],
      },
      meta: {
        author: post.meta?.author || "",
        date: post.meta?.date || "",
        reviewer: post.meta?.reviewer || "",
        readTime: post.meta?.readTime || "",
      },
      image: post.image || "",
      related_studies:
        post.related_studies?.map((study) => ({
          title: study.title || "",
          link: study.link || "",
        })) || [],
    });
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleNestedInputChange = (parentField, field, value) => {
    setFormData((prev) => ({
      ...prev,
      [parentField]: {
        ...prev[parentField],
        [field]: value,
      },
    }));
  };

  const handleArrayItemChange = (arrayName, index, field, value) => {
    setFormData((prev) => {
      if (arrayName === "summary" || arrayName === "body") {
        const newContent = { ...prev.content };
        newContent[arrayName] = [...newContent[arrayName]];
        newContent[arrayName][index] = {
          ...newContent[arrayName][index],
          [field]: value,
        };
        return {
          ...prev,
          content: newContent,
        };
      } else {
        const newRelatedStudies = [...prev.related_studies];
        newRelatedStudies[index] = {
          ...newRelatedStudies[index],
          [field]: value,
        };
        return {
          ...prev,
          related_studies: newRelatedStudies,
        };
      }
    });
  };

  const handleAddArrayItem = (arrayName, template) => {
    setFormData((prev) => {
      if (arrayName === "summary" || arrayName === "body") {
        const newContent = { ...prev.content };
        newContent[arrayName] = [...newContent[arrayName], template];
        return {
          ...prev,
          content: newContent,
        };
      } else {
        return {
          ...prev,
          [arrayName]: [...prev[arrayName], template],
        };
      }
    });
  };

  const handleHyperlinkChange = (bodyIndex, hyperlinkIndex, field, value) => {
    setFormData((prev) => {
      const newContent = { ...prev.content };
      newContent.body = [...newContent.body];
      newContent.body[bodyIndex] = {
        ...newContent.body[bodyIndex],
        hyperlinks: [...(newContent.body[bodyIndex].hyperlinks || [])],
      };

      if (hyperlinkIndex === -1) {
        newContent.body[bodyIndex].hyperlinks.push({ [field]: value });
      } else {
        newContent.body[bodyIndex].hyperlinks[hyperlinkIndex] = {
          ...newContent.body[bodyIndex].hyperlinks[hyperlinkIndex],
          [field]: value,
        };
      }

      return {
        ...prev,
        content: newContent,
      };
    });
  };

  const handleRemoveHyperlink = (bodyIndex, hyperlinkIndex) => {
    setFormData((prev) => {
      const newContent = { ...prev.content };
      newContent.body = [...newContent.body];
      newContent.body[bodyIndex] = {
        ...newContent.body[bodyIndex],
        hyperlinks: newContent.body[bodyIndex].hyperlinks.filter(
          (_, i) => i !== hyperlinkIndex
        ),
      };

      return {
        ...prev,
        content: newContent,
      };
    });
  };

  const handleSubsectionChange = (bodyIndex, subsectionIndex, field, value) => {
    setFormData((prev) => {
      const newContent = { ...prev.content };
      newContent.body = [...newContent.body];
      newContent.body[bodyIndex] = {
        ...newContent.body[bodyIndex],
        subsections: [...(newContent.body[bodyIndex].subsections || [])],
      };

      if (subsectionIndex === -1) {
        newContent.body[bodyIndex].subsections.push({ [field]: value });
      } else {
        newContent.body[bodyIndex].subsections[subsectionIndex] = {
          ...newContent.body[bodyIndex].subsections[subsectionIndex],
          [field]: value,
        };
      }

      return {
        ...prev,
        content: newContent,
      };
    });
  };

  const handleRemoveSubsection = (bodyIndex, subsectionIndex) => {
    setFormData((prev) => {
      const newContent = { ...prev.content };
      newContent.body = [...newContent.body];
      newContent.body[bodyIndex] = {
        ...newContent.body[bodyIndex],
        subsections: newContent.body[bodyIndex].subsections.filter(
          (_, i) => i !== subsectionIndex
        ),
      };

      return {
        ...prev,
        content: newContent,
      };
    });
  };

  const handleKeywordsChange = (bodyIndex, keywords) => {
    setFormData((prev) => {
      const newContent = { ...prev.content };
      newContent.body = [...newContent.body];
      newContent.body[bodyIndex] = {
        ...newContent.body[bodyIndex],
        keywords: Array.isArray(keywords)
          ? keywords
          : keywords.split(",").map((k) => k.trim()),
      };

      return {
        ...prev,
        content: newContent,
      };
    });
  };

  const handleRemoveArrayItem = (arrayName, index) => {
    setFormData((prev) => {
      if (arrayName === "summary" || arrayName === "body") {
        const newContent = { ...prev.content };
        newContent[arrayName] = newContent[arrayName].filter(
          (_, i) => i !== index
        );
        return {
          ...prev,
          content: newContent,
        };
      } else {
        return {
          ...prev,
          [arrayName]: prev[arrayName].filter((_, i) => i !== index),
        };
      }
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      if (selectedPost) {
        await axios.put(
          `https://fitness-backend-api.vercel.app/api/posts/${selectedPost._id}`,
          formData
        );
      } else {
        await axios.post(
          "https://fitness-backend-api.vercel.app/api/posts",
          formData
        );
      }
      fetchPosts();
      setSelectedPost(null);
      setFormData({
        title: "",
        position: "",
        link: "",
        content: {
          summary: [],
          body: [],
        },
        meta: {
          author: "",
          date: "",
          reviewer: "",
          readTime: "",
        },
        image: "",
        related_studies: [],
      });
      setError("");
    } catch (err) {
      setError("Failed to save post");
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this post?")) return;

    setIsLoading(true);
    try {
      await axios.delete(
        `https://fitness-backend-api.vercel.app/api/posts/${id}`
      );
      fetchPosts();
      if (selectedPost && selectedPost._id === id) {
        setSelectedPost(null);
        setFormData({
          title: "",
          position: "",
          content: {
            summary: [],
            body: [],
          },
          meta: {
            author: "",
            date: "",
            reviewer: "",
            readTime: "",
          },
          image: "",
          related_studies: [],
        });
      }
      setError("");
    } catch (err) {
      setError("Failed to delete post");
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleResetForm = () => {
    setSelectedPost(null);
    setFormData({
      title: "",
      position: "",
      link: "",
      content: {
        summary: [],
        body: [],
      },
      meta: {
        author: "",
        date: "",
        reviewer: "",
        readTime: "",
      },
      image: "",
      related_studies: [],
    });
  };

  return (
    <div className="container mx-auto px-4 py-8 max-w-7xl">
      <h1 className="text-3xl font-bold text-purple-500 mb-6">
        Post Management
      </h1>

      {error && (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6">
          {error}
        </div>
      )}

      <div className="flex flex-col sm:flex-row gap-4 mb-6 text-white-100">
        <select
          className="px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          value={searchField}
          onChange={(e) => setSearchField(e.target.value)}
        >
          <option className="text-gray-800" value="title">
            Search by Title
          </option>
          <option className="text-gray-800" value="position">
            Search by Position
          </option>
          <option className="text-gray-800" value="id">
            Search by ID
          </option>
        </select>

        <input
          type="text"
          className="flex-grow px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder={`Search by ${searchField}...`}
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />

        <button
          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          onClick={fetchPosts}
        >
          Show All
        </button>
        <button
          className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500"
          onClick={fetchTopArticles}
        >
          Show Top Articles
        </button>
      </div>

      <div className="flex flex-col lg:flex-row gap-6">
        <div className="lg:w-1/3 bg-white rounded-lg shadow-md p-4 overflow-y-auto max-h-screen">
          <h2 className="text-xl font-semibold text-gray-700 mb-4">Posts</h2>
          {isLoading ? (
            <p className="text-gray-500">Loading...</p>
          ) : (
            <ul className="space-y-2">
              {filteredPosts.map((post) => (
                <li
                  key={post._id}
                  className={`p-3 rounded-md cursor-pointer ${
                    selectedPost?._id === post._id
                      ? "bg-blue-100 border-l-4 border-blue-500"
                      : "hover:bg-gray-100"
                  }`}
                  onClick={() => handleSelectPost(post)}
                >
                  <h3 className="font-medium text-gray-800">{post.title}</h3>
                  <p className="text-sm text-gray-600">
                    Position: {post.position}
                  </p>
                  <p className="text-xs text-gray-500 truncate">
                    ID: {post._id}
                  </p>
                  <button
                    className="mt-2 px-2 py-1 bg-red-500 text-white text-xs rounded hover:bg-red-600 focus:outline-none"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDelete(post._id);
                    }}
                  >
                    Delete
                  </button>
                </li>
              ))}
            </ul>
          )}
        </div>

        <div className="lg:w-2/3 bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold text-gray-700 mb-4">
            {selectedPost ? "Edit Post" : "Create New Post"}
          </h2>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Title
                </label>
                <div className="flex">
                  <input
                    type="text"
                    name="title"
                    className="flex-grow px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
                    value={formData.title}
                    onChange={handleInputChange}
                    required
                  />
                  <button
                    type="button"
                    className={`ml-2 px-3 py-2 rounded-md focus:outline-none focus:ring-2 ${
                      formData.title
                        ? "bg-purple-600 text-white hover:bg-purple-700 focus:ring-purple-500"
                        : "bg-gray-300 text-gray-500 cursor-not-allowed"
                    }`}
                    onClick={handleGenerateContent}
                    disabled={!formData.title || isGenerating}
                  >
                    {isGenerating ? (
                      <span className="flex items-center">
                        <svg
                          className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                          xmlns="http://www.w3.org/2000/svg"
                          fill="none"
                          viewBox="0 0 24 24"
                        >
                          <circle
                            className="opacity-25"
                            cx="12"
                            cy="12"
                            r="10"
                            stroke="currentColor"
                            strokeWidth="4"
                          ></circle>
                          <path
                            className="opacity-75"
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                          ></path>
                        </svg>
                        Generating...
                      </span>
                    ) : (
                      "AI Generate"
                    )}
                  </button>
                </div>
                {aiError && (
                  <p className="mt-1 text-sm text-red-600">{aiError}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Position
                </label>
                <select
                  name="position"
                  className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
                  value={formData.position}
                  onChange={handleInputChange}
                >
                  <option value="">Select a position</option>
                  {positionOptions.map((category) => (
                    <optgroup key={category.label} label={category.label}>
                      {category.options.map((option) => (
                        <option key={option.value} value={option.value}>
                          {category.label} - {option.label}
                        </option>
                      ))}
                    </optgroup>
                  ))}
                </select>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Number of Sections to Generate
                </label>
                <select
                  className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
                  value={sectionsCount}
                  onChange={(e) => setSectionsCount(parseInt(e.target.value))}
                >
                  <option value="3">3 Sections</option>
                  <option value="5">5 Sections</option>
                  <option value="7">7 Sections</option>
                  <option value="10">10 Sections</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Direct Link
                </label>
                <input
                  type="text"
                  name="link"
                  className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
                  value={formData.link}
                  onChange={handleInputChange}
                  placeholder="e.g., /healthy-eating"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Image URL
              </label>
              <input
                type="text"
                name="image"
                className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
                value={formData.image}
                onChange={handleInputChange}
              />
            </div>

            <div className="border-t pt-4">
              <h3 className="text-lg font-medium text-gray-800 mb-3">
                Meta Information
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Author
                  </label>
                  <input
                    type="text"
                    className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
                    value={formData.meta.author || ""}
                    onChange={(e) =>
                      handleNestedInputChange("meta", "author", e.target.value)
                    }
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Date
                  </label>
                  <CustomDatePicker
                    value={formData.meta.date}
                    onChange={(date) =>
                      handleNestedInputChange("meta", "date", date)
                    }
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Reviewer
                  </label>
                  <input
                    type="text"
                    className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
                    value={formData.meta.reviewer || ""}
                    onChange={(e) =>
                      handleNestedInputChange(
                        "meta",
                        "reviewer",
                        e.target.value
                      )
                    }
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Read Time
                  </label>
                  <input
                    type="text"
                    className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
                    value={formData.meta.readTime || ""}
                    onChange={(e) =>
                      handleNestedInputChange(
                        "meta",
                        "readTime",
                        e.target.value
                      )
                    }
                  />
                </div>
              </div>
            </div>

            <div className="border-t pt-4">
              <div className="flex justify-between items-center mb-3">
                <h3 className="text-lg font-medium text-gray-800">
                  Summary Items
                </h3>
                <button
                  type="button"
                  className="px-3 py-1 bg-green-500 text-white rounded-md text-sm hover:bg-green-600"
                  onClick={() =>
                    handleAddArrayItem("summary", { title: "", text: "" })
                  }
                >
                  Add Summary Item
                </button>
              </div>

              {formData.content?.summary?.map((item, index) => (
                <div key={index} className="bg-gray-50 p-4 rounded-md mb-3">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-2">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Title
                      </label>
                      <input
                        type="text"
                        className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
                        value={item.title || ""}
                        onChange={(e) =>
                          handleArrayItemChange(
                            "summary",
                            index,
                            "title",
                            e.target.value
                          )
                        }
                      />
                    </div>
                    <div className="flex items-end justify-end">
                      <button
                        type="button"
                        className="px-2 py-1 bg-red-500 text-white rounded-md text-sm hover:bg-red-600"
                        onClick={() => handleRemoveArrayItem("summary", index)}
                      >
                        Remove
                      </button>
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Text
                    </label>
                    <textarea
                      className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
                      rows="3"
                      value={item.text || ""}
                      onChange={(e) =>
                        handleArrayItemChange(
                          "summary",
                          index,
                          "text",
                          e.target.value
                        )
                      }
                    />
                  </div>
                </div>
              ))}
            </div>

            <div className="border-t pt-4">
              <div className="flex justify-between items-center mb-3">
                <h3 className="text-lg font-medium text-gray-800">
                  Body Content
                </h3>
                <button
                  type="button"
                  className="px-3 py-1 bg-green-500 text-white rounded-md text-sm hover:bg-green-600"
                  onClick={() =>
                    handleAddArrayItem("body", {
                      headline: "",
                      content: "",
                      keywords: [],
                      hyperlinks: [],
                      subsections: [],
                    })
                  }
                >
                  Add Body Item
                </button>
              </div>

              {formData.content?.body?.map((item, index) => (
                <div key={index} className="bg-gray-50 p-4 rounded-md mb-3">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-2">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Headline
                      </label>
                      <input
                        type="text"
                        className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
                        value={item.headline || ""}
                        onChange={(e) =>
                          handleArrayItemChange(
                            "body",
                            index,
                            "headline",
                            e.target.value
                          )
                        }
                      />
                    </div>
                    <div className="flex items-end justify-end">
                      <button
                        type="button"
                        className="px-2 py-1 bg-red-500 text-white rounded-md text-sm hover:bg-red-600"
                        onClick={() => handleRemoveArrayItem("body", index)}
                      >
                        Remove
                      </button>
                    </div>
                  </div>

                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Keywords (comma separated)
                    </label>
                    <input
                      type="text"
                      className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
                      value={item.keywords?.join(", ") || ""}
                      onChange={(e) =>
                        handleKeywordsChange(index, e.target.value)
                      }
                      placeholder="e.g., cognitive skills, attention, problem-solving"
                    />
                  </div>

                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Content
                    </label>
                    <textarea
                      className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
                      rows="3"
                      value={item.content || ""}
                      onChange={(e) =>
                        handleArrayItemChange(
                          "body",
                          index,
                          "content",
                          e.target.value
                        )
                      }
                    />
                  </div>

                  <div className="border-t pt-3 mt-3">
                    <div className="flex justify-between items-center mb-2">
                      <h4 className="text-md font-medium text-gray-700">
                        Subsections
                      </h4>
                      <button
                        type="button"
                        className="px-2 py-1 bg-blue-500 text-white rounded-md text-xs hover:bg-blue-600"
                        onClick={() =>
                          handleSubsectionChange(index, -1, "subheading", "")
                        }
                      >
                        Add Subsection
                      </button>
                    </div>

                    {item.subsections?.map((subsection, sIndex) => (
                      <div
                        key={sIndex}
                        className="bg-gray-100 p-3 rounded mb-2"
                      >
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mb-2">
                          <div>
                            <label className="block text-xs font-medium text-gray-600 mb-1">
                              Subheading
                            </label>
                            <input
                              type="text"
                              className="w-full px-2 py-1 border rounded text-sm text-black"
                              value={subsection.subheading || ""}
                              onChange={(e) =>
                                handleSubsectionChange(
                                  index,
                                  sIndex,
                                  "subheading",
                                  e.target.value
                                )
                              }
                            />
                          </div>
                          <div className="flex items-end justify-end">
                            <button
                              type="button"
                              className="px-2 py-1 bg-red-500 text-white rounded text-xs hover:bg-red-600"
                              onClick={() =>
                                handleRemoveSubsection(index, sIndex)
                              }
                            >
                              Remove
                            </button>
                          </div>
                        </div>
                        <div>
                          <label className="block text-xs font-medium text-gray-600 mb-1">
                            Content
                          </label>
                          <textarea
                            className="w-full px-2 py-1 border rounded text-sm text-black"
                            rows="2"
                            value={subsection.content || ""}
                            onChange={(e) =>
                              handleSubsectionChange(
                                index,
                                sIndex,
                                "content",
                                e.target.value
                              )
                            }
                          />
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="border-t pt-3 mt-3">
                    <div className="flex justify-between items-center mb-2">
                      <h4 className="text-md font-medium text-gray-700">
                        Hyperlinks
                      </h4>
                      <button
                        type="button"
                        className="px-2 py-1 bg-blue-500 text-white rounded-md text-xs hover:bg-blue-600"
                        onClick={() =>
                          handleHyperlinkChange(index, -1, "keyword", "")
                        }
                      >
                        Add Hyperlink
                      </button>
                    </div>

                    {item.hyperlinks?.map((hyperlink, hIndex) => (
                      <div
                        key={hIndex}
                        className="bg-gray-100 p-3 rounded mb-2"
                      >
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                          <div>
                            <label className="block text-xs font-medium text-gray-600 mb-1">
                              Keyword
                            </label>
                            <input
                              type="text"
                              className="w-full px-2 py-1 border rounded text-sm text-black"
                              value={hyperlink.keyword || ""}
                              onChange={(e) =>
                                handleHyperlinkChange(
                                  index,
                                  hIndex,
                                  "keyword",
                                  e.target.value
                                )
                              }
                            />
                          </div>
                          <div>
                            <label className="block text-xs font-medium text-gray-600 mb-1">
                              Link URL
                            </label>
                            <div className="flex">
                              <input
                                type="text"
                                className="flex-grow px-2 py-1 border rounded text-sm text-black"
                                value={hyperlink.link || ""}
                                onChange={(e) =>
                                  handleHyperlinkChange(
                                    index,
                                    hIndex,
                                    "link",
                                    e.target.value
                                  )
                                }
                              />
                              <button
                                type="button"
                                className="ml-2 px-2 py-1 bg-red-500 text-white rounded text-xs hover:bg-red-600"
                                onClick={() =>
                                  handleRemoveHyperlink(index, hIndex)
                                }
                              >
                                Remove
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>

            <div className="border-t pt-4">
              <div className="flex justify-between items-center mb-3">
                <h3 className="text-lg font-medium text-gray-800">
                  Related Studies
                </h3>
                <button
                  type="button"
                  className="px-3 py-1 bg-green-500 text-white rounded-md text-sm hover:bg-green-600"
                  onClick={() =>
                    handleAddArrayItem("related_studies", {
                      title: "",
                      link: "",
                    })
                  }
                >
                  Add Related Study
                </button>
              </div>

              {formData.related_studies.map((item, index) => (
                <div key={index} className="bg-gray-50 p-4 rounded-md mb-3">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-2">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Study Title
                      </label>
                      <input
                        type="text"
                        className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
                        value={item.title || ""}
                        onChange={(e) =>
                          handleArrayItemChange(
                            "related_studies",
                            index,
                            "title",
                            e.target.value
                          )
                        }
                      />
                    </div>
                    <div className="flex items-end justify-end">
                      <button
                        type="button"
                        className="px-2 py-1 bg-red-500 text-white rounded-md text-sm hover:bg-red-600"
                        onClick={() =>
                          handleRemoveArrayItem("related_studies", index)
                        }
                      >
                        Remove
                      </button>
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Link
                    </label>
                    <input
                      type="text"
                      className="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
                      value={item.link || ""}
                      onChange={(e) =>
                        handleArrayItemChange(
                          "related_studies",
                          index,
                          "link",
                          e.target.value
                        )
                      }
                    />
                  </div>
                </div>
              ))}
            </div>

            <div className="flex justify-end space-x-4 pt-4 border-t">
              <button
                type="button"
                className="px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500"
                onClick={handleResetForm}
                disabled={isLoading}
              >
                Reset
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
                disabled={isLoading}
              >
                {isLoading
                  ? "Processing..."
                  : selectedPost
                  ? "Update Post"
                  : "Create Post"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Admin;
